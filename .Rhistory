remotes::install_github("tallguyjenks/gruvboxr")
install.packages("remotes::install_github("tallguyjenks/gruvboxr")")
install_github("tallguyjenks/gruvboxr")
library(remotes)
library(remote)
gruvboxr::install_theme()
library(biomaRt)
library(edgeR)
library(dplyr)
library(ggrepel)
library(fgsea)
library(org.Hs.eg.db)
library(clusterProfiler)
library(enrichplot)
library(ggnewscale)
library(DOSE)
library(pathview)
library(tidyverse)
library(Biostrings)
library(enrichTF)
library(MotifDb)
library(seqLogo)
library(PWMEnrich)
library(PWMEnrich.Hsapiens.background)
library(igraph)
crc<-load("data/Colorectal_Cancer.RData")
# connect to biomart
ensembl <- useMart(biomart="ensembl",dataset="hsapiens_gene_ensembl")
# get protein coding gens among the genes present in raw_counts_df
pc_genes <- getBM(attributes=c("ensembl_gene_id","gene_biotype","entrezgene_id","external_gene_name", "description"),
filters=c("ensembl_gene_id", "biotype"),
values=list(rownames(raw_counts_df), c("protein_coding")),
mart = ensembl)
# collapse records with same ensembl_gene_id into one
pc_genes <- pc_genes %>% distinct(ensembl_gene_id, .keep_all = TRUE)
# filter for protein coding genes
raw_counts_df <- raw_counts_df[which(rownames(raw_counts_df)%in%pc_genes$ensembl_gene_id),]
r_anno_df <- r_anno_df[which(r_anno_df$gene_id%in%pc_genes$ensembl_gene_id),]
# Count threshold
count_thr <- 20
# Number of replicates with more counts than the count threshold
repl_thr <- 5
# Convert conditions in factors for the following function
c_anno_df$condition <- as.factor(c_anno_df$condition)
# Create a filtering vector
filter_vec <- apply(raw_counts_df,1,function(y) min(by(y, c_anno_df$condition, function(x) sum(x>count_thr))))
# Select only genes with filtering characteristics and obtain a new matrix
filter_counts_df <- raw_counts_df[filter_vec>=repl_thr,]
# Apply the filter on gene annotation
filter_anno_df <- r_anno_df[rownames(filter_counts_df),]
# Create a DGEList object
edge_c <- DGEList(counts=filter_counts_df,group=c_anno_df$condition,samples=c_anno_df,genes=filter_anno_df)
# Normalization with the edgeR package (TMM method)
edge_n <- calcNormFactors(edge_c,method="TMM")
# Display normalization factors (also accounting for library size)
norm_factors <- mean(edge_n$samples$lib.size*edge_n$samples$norm.factors)/(edge_n$samples$lib.size*edge_n$samples$norm.factors)
names(norm_factors) <- edge_n$samples$sample
# Create a cpm-rpkm table (normalized expression values)
cpm_table <- as.data.frame(round(cpm(edge_n),2))
head(cpm_table)
# Define the experimental design matrix
design <- model.matrix(~0+group, data=edge_n$samples)
colnames(design) <- levels(edge_n$samples$group)
rownames(design) <- edge_n$samples$sample
# Calculate dispersion and fit with edgeR (necessary for differential expression analysis)
edge_d <- estimateDisp(edge_n,design)
edge_f <- glmQLFit(edge_d,design)
# Definition of the contrast (conditions to be compared)
contro <- makeContrasts("Case-Control", levels=design)
# Fit the model with generalized linear models
edge_t <- glmQLFTest(edge_f,contrast=contro)
# Retrieve data from the edge class
degs <- edge_t$table
# Merge edgeR-derived data with ENSEMBL-derived gene information, such that there is an entrezgene_id and it is unique (needed for KEGG)
degs['gene_id'] <- rownames(degs)
degs <- merge(degs,pc_genes,by.x='gene_id',by.y="ensembl_gene_id")
degs <- degs[which(!is.na(degs$entrezgene_id)),]
degs <- degs[-which(duplicated(degs$entrezgene_id)),]
library(biomaRt)
library(edgeR)
library(dplyr)
library(ggrepel)
library(fgsea)
library(org.Hs.eg.db)
library(clusterProfiler)
library(enrichplot)
library(ggnewscale)
library(DOSE)
library(pathview)
library(tidyverse)
library(Biostrings)
library(enrichTF)
library(MotifDb)
library(seqLogo)
library(PWMEnrich)
library(PWMEnrich.Hsapiens.background)
library(igraph)
crc<-load("data/Colorectal_Cancer.RData")
# connect to biomart
ensembl <- useMart(biomart="ensembl",dataset="hsapiens_gene_ensembl")
# get protein coding gens among the genes present in raw_counts_df
pc_genes <- getBM(attributes=c("ensembl_gene_id","gene_biotype","entrezgene_id","external_gene_name", "description"),
filters=c("ensembl_gene_id", "biotype"),
values=list(rownames(raw_counts_df), c("protein_coding")),
mart = ensembl)
# collapse records with same ensembl_gene_id into one
pc_genes <- pc_genes %>% distinct(ensembl_gene_id, .keep_all = TRUE)
# filter for protein coding genes
raw_counts_df <- raw_counts_df[which(rownames(raw_counts_df)%in%pc_genes$ensembl_gene_id),]
r_anno_df <- r_anno_df[which(r_anno_df$gene_id%in%pc_genes$ensembl_gene_id),]
# Count threshold
count_thr <- 20
# Number of replicates with more counts than the count threshold
repl_thr <- 5
# Convert conditions in factors for the following function
c_anno_df$condition <- as.factor(c_anno_df$condition)
# Create a filtering vector
filter_vec <- apply(raw_counts_df,1,function(y) min(by(y, c_anno_df$condition, function(x) sum(x>count_thr))))
# Select only genes with filtering characteristics and obtain a new matrix
filter_counts_df <- raw_counts_df[filter_vec>=repl_thr,]
# Apply the filter on gene annotation
filter_anno_df <- r_anno_df[rownames(filter_counts_df),]
# Create a DGEList object
edge_c <- DGEList(counts=filter_counts_df,group=c_anno_df$condition,samples=c_anno_df,genes=filter_anno_df)
# Normalization with the edgeR package (TMM method)
edge_n <- calcNormFactors(edge_c,method="TMM")
# Display normalization factors (also accounting for library size)
norm_factors <- mean(edge_n$samples$lib.size*edge_n$samples$norm.factors)/(edge_n$samples$lib.size*edge_n$samples$norm.factors)
names(norm_factors) <- edge_n$samples$sample
# Create a cpm-rpkm table (normalized expression values)
cpm_table <- as.data.frame(round(cpm(edge_n),2))
head(cpm_table)
# Define the experimental design matrix
design <- model.matrix(~0+group, data=edge_n$samples)
colnames(design) <- levels(edge_n$samples$group)
rownames(design) <- edge_n$samples$sample
# Calculate dispersion and fit with edgeR (necessary for differential expression analysis)
edge_d <- estimateDisp(edge_n,design)
edge_f <- glmQLFit(edge_d,design)
# Definition of the contrast (conditions to be compared)
contro <- makeContrasts("Case-Control", levels=design)
# Fit the model with generalized linear models
edge_t <- glmQLFTest(edge_f,contrast=contro)
# Retrieve data from the edge class
degs <- edge_t$table
# Merge edgeR-derived data with ENSEMBL-derived gene information, such that there is an entrezgene_id and it is unique (needed for KEGG)
degs['gene_id'] <- rownames(degs)
degs <- merge(degs,pc_genes,by.x='gene_id',by.y="ensembl_gene_id")
degs <- degs[which(!is.na(degs$entrezgene_id)),]
degs <- degs[-which(duplicated(degs$entrezgene_id)),]
# Split degs into up and down regulated genes
upreg <- filter(degs, logCPM > 1 & PValue < 0.01 & logFC > 1.5 )
downreg <- filter(degs, logCPM > 1 & PValue < 0.01 & logFC < -1.5 )
# Volcano plot
degs$diffexpressed <- "NO"
degs$diffexpressed[degs$logFC > 1.5] <- "UP"
degs$diffexpressed[degs$logFC < -1.5] <- "DOWN"
ggplot(data=degs, aes(x=logFC, y=-log10(PValue), col=diffexpressed, label="")) +
geom_point() +
theme_minimal() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-1.5, 1.5), col="red") +
geom_hline(yintercept=-log10(0.01), col="red")
ggsave("volcano_plot.pdf",path="plots")
#Ordering up and down regulated genes by log fold change
upreg <- upreg[order(-upreg$logFC),]
downreg <- downreg[order(downreg$logFC),]
#Heatmap representing the top 10 differentially expressed genes 5 from the up set and 5 from the down
cols <- c(rep("chartreuse4",50),rep("green",50))
pal <- c("blue","white","red")
pal <- colorRampPalette(pal)(100)
#Ordering sample in control-tumour for the heatmap
ordered_anno <- transform(c_anno_df, n=nchar(as.character(condition)))
ordered_anno <- ordered_anno[with(ordered_anno, order(n, condition)), ]
ordered_anno <- subset(ordered_anno, select = -c(n))
#Building the heatmap matrix
heatmap_matrix <- as.matrix(cpm_table[rbind(head(upreg, 10), head(downreg, 10))$gene_id,])[, ordered_anno$sample]
heatmap_matrix <- as.data.frame(heatmap_matrix)
heatmap_matrix$gene_id <- rownames(heatmap_matrix)
hm_with_genename <- merge(degs, heatmap_matrix)
hm_with_genename <- subset(hm_with_genename, select = -c(logFC, logCPM, F, PValue, gene_biotype, entrezgene_id, description, diffexpressed, gene_id))
row.names(hm_with_genename) <- hm_with_genename$external_gene_name
hm_with_genename <- subset(hm_with_genename, select = -c(external_gene_name))
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend(x = 'topleft', legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
dev.off()
setwd("~/universita/bioinformatic_resources/project")
library(biomaRt)
library(edgeR)
library(dplyr)
library(ggrepel)
library(fgsea)
library(org.Hs.eg.db)
library(clusterProfiler)
library(enrichplot)
library(ggnewscale)
library(DOSE)
library(pathview)
library(tidyverse)
library(Biostrings)
library(enrichTF)
library(MotifDb)
library(seqLogo)
library(PWMEnrich)
library(PWMEnrich.Hsapiens.background)
library(igraph)
crc<-load("data/Colorectal_Cancer.RData")
# connect to biomart
ensembl <- useMart(biomart="ensembl",dataset="hsapiens_gene_ensembl")
# get protein coding gens among the genes present in raw_counts_df
pc_genes <- getBM(attributes=c("ensembl_gene_id","gene_biotype","entrezgene_id","external_gene_name", "description"),
filters=c("ensembl_gene_id", "biotype"),
values=list(rownames(raw_counts_df), c("protein_coding")),
mart = ensembl)
# collapse records with same ensembl_gene_id into one
pc_genes <- pc_genes %>% distinct(ensembl_gene_id, .keep_all = TRUE)
# filter for protein coding genes
raw_counts_df <- raw_counts_df[which(rownames(raw_counts_df)%in%pc_genes$ensembl_gene_id),]
r_anno_df <- r_anno_df[which(r_anno_df$gene_id%in%pc_genes$ensembl_gene_id),]
# Count threshold
count_thr <- 20
# Number of replicates with more counts than the count threshold
repl_thr <- 5
# Convert conditions in factors for the following function
c_anno_df$condition <- as.factor(c_anno_df$condition)
# Create a filtering vector
filter_vec <- apply(raw_counts_df,1,function(y) min(by(y, c_anno_df$condition, function(x) sum(x>count_thr))))
# Select only genes with filtering characteristics and obtain a new matrix
filter_counts_df <- raw_counts_df[filter_vec>=repl_thr,]
# Apply the filter on gene annotation
filter_anno_df <- r_anno_df[rownames(filter_counts_df),]
# Create a DGEList object
edge_c <- DGEList(counts=filter_counts_df,group=c_anno_df$condition,samples=c_anno_df,genes=filter_anno_df)
# Normalization with the edgeR package (TMM method)
edge_n <- calcNormFactors(edge_c,method="TMM")
# Display normalization factors (also accounting for library size)
norm_factors <- mean(edge_n$samples$lib.size*edge_n$samples$norm.factors)/(edge_n$samples$lib.size*edge_n$samples$norm.factors)
names(norm_factors) <- edge_n$samples$sample
# Create a cpm-rpkm table (normalized expression values)
cpm_table <- as.data.frame(round(cpm(edge_n),2))
head(cpm_table)
# Define the experimental design matrix
design <- model.matrix(~0+group, data=edge_n$samples)
colnames(design) <- levels(edge_n$samples$group)
rownames(design) <- edge_n$samples$sample
# Calculate dispersion and fit with edgeR (necessary for differential expression analysis)
edge_d <- estimateDisp(edge_n,design)
edge_f <- glmQLFit(edge_d,design)
# Definition of the contrast (conditions to be compared)
contro <- makeContrasts("Case-Control", levels=design)
# Fit the model with generalized linear models
edge_t <- glmQLFTest(edge_f,contrast=contro)
# Retrieve data from the edge class
degs <- edge_t$table
# Merge edgeR-derived data with ENSEMBL-derived gene information, such that there is an entrezgene_id and it is unique (needed for KEGG)
degs['gene_id'] <- rownames(degs)
degs <- merge(degs,pc_genes,by.x='gene_id',by.y="ensembl_gene_id")
degs <- degs[which(!is.na(degs$entrezgene_id)),]
degs <- degs[-which(duplicated(degs$entrezgene_id)),]
# Split degs into up and down regulated genes
upreg <- filter(degs, logCPM > 1 & PValue < 0.01 & logFC > 1.5 )
downreg <- filter(degs, logCPM > 1 & PValue < 0.01 & logFC < -1.5 )
# Volcano plot
degs$diffexpressed <- "NO"
degs$diffexpressed[degs$logFC > 1.5] <- "UP"
degs$diffexpressed[degs$logFC < -1.5] <- "DOWN"
ggplot(data=degs, aes(x=logFC, y=-log10(PValue), col=diffexpressed, label="")) +
geom_point() +
theme_minimal() +
scale_color_manual(values=c("blue", "black", "red")) +
geom_vline(xintercept=c(-1.5, 1.5), col="red") +
geom_hline(yintercept=-log10(0.01), col="red")
ggsave("volcano_plot.pdf",path="plots")
#Ordering up and down regulated genes by log fold change
upreg <- upreg[order(-upreg$logFC),]
downreg <- downreg[order(downreg$logFC),]
#Heatmap representing the top 10 differentially expressed genes 5 from the up set and 5 from the down
cols <- c(rep("chartreuse4",50),rep("green",50))
pal <- c("blue","white","red")
pal <- colorRampPalette(pal)(100)
#Ordering sample in control-tumour for the heatmap
ordered_anno <- transform(c_anno_df, n=nchar(as.character(condition)))
ordered_anno <- ordered_anno[with(ordered_anno, order(n, condition)), ]
ordered_anno <- subset(ordered_anno, select = -c(n))
#Building the heatmap matrix
heatmap_matrix <- as.matrix(cpm_table[rbind(head(upreg, 10), head(downreg, 10))$gene_id,])[, ordered_anno$sample]
heatmap_matrix <- as.data.frame(heatmap_matrix)
heatmap_matrix$gene_id <- rownames(heatmap_matrix)
hm_with_genename <- merge(degs, heatmap_matrix)
hm_with_genename <- subset(hm_with_genename, select = -c(logFC, logCPM, F, PValue, gene_biotype, entrezgene_id, description, diffexpressed, gene_id))
row.names(hm_with_genename) <- hm_with_genename$external_gene_name
hm_with_genename <- subset(hm_with_genename, select = -c(external_gene_name))
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend(0,0, legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend(1,95, legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend(1,95, legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
dev.off()
legend("topleft", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("topleft", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("topright", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("bottomright", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"))
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("bottomright", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"), cex = 0.8)
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("bottomright", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"), cex = 0.6)
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("topleft", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"), cex = 0.6)
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("topright", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"), cex = 0.6)
dev.off()
#Saving the heatmap
pdf(file="plots/heatmap.pdf")
heatmap(as.matrix(hm_with_genename), ColSideColors = cols, cexCol = 2,margins = c(2,13),col = pal, cexRow = 1, Colv = NA, Rowv = TRUE, xlab = "Samples", labCol = FALSE)
legend("topright", legend=c("Down", "Neutral", "Up"), fill = c("blue","white","red"), cex = 0.8)
dev.off()
